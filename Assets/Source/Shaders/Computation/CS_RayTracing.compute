// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

/// INCLUDES
#pragma once
// Our neat and tidy include package
#include "Assets/Source/Shaders/Utilities/UTIL_Graphics.cginc"

/// DEFINES
#define LAMBERT_DIFFUSE 1
#define PHONG_SPECULAR 2
#define CHANCE_DIFF_SPEC 3

/// EXTERNS
extern RWTexture2D<float4> Result;

extern Texture2D<float4> _SkyboxTexture;
extern SamplerState sampler_SkyboxTexture;

extern float2 _PixelOffset;
extern uint _MaxBounce;
extern float4 _DirectionalLight;
extern StructuredBuffer<Sphere> _Spheres;
extern uint _LightingMode;
extern float3 _SkyColor;
extern float _UsingSkybox;

/// CONSTANTS
static const float3 GROUND_ALBEDO = float3(1.0f, 1.0f, 1.0f);
static const float3 GROUND_SPECULAR = float3(0.04f, 0.04f, 0.04f);
static const float3 GROUND_EMISSION = float3(0.0f, 0.0f, 0.0f);
static const float GROUND_ROUGHNESS = 0.85f;

/// GENERICS 
void IntersectGroundPlane(Ray r, inout Hit best) {
    // calc the distance along the ray where the ground plane is intersected
    float t = -r.Origin.y / r.Dir.y;
    if (t > 0 && t < best.Dist)
    {
        best = Hit_Construct(r, t);
        best.Mat = Material_Construct(GROUND_ALBEDO, GROUND_SPECULAR, GROUND_EMISSION, GROUND_ROUGHNESS);
    }
}

/// RAY TRACING GUTS
Hit Trace(Ray r) {
    Hit best = Hit_Construct();
    uint count, stride, i;
    
    IntersectGroundPlane(r, best);

    _Spheres.GetDimensions(count, stride);
    for (i = 0; i < count; ++i)
        IntersectSphere(r, best, _Spheres[i]);

    _Meshes.GetDimensions(count, stride);
    for (i = 0; i < count; ++i)
        IntersectMeshObject(r, best, _Meshes[i]);

    return best;
}

float3 Shade(inout Ray r, Hit h) {
    if (h.Dist < INF)   // We hit something
    {
        switch (_LightingMode)
        {
            case LAMBERT_DIFFUSE:
                LambertDiffuse(r, h);
                break;
            case PHONG_SPECULAR:
                PhongSpecular(r, h);
                break;
            case CHANCE_DIFF_SPEC:
                ChanceDiffuseSpecular(r, h);
                break;
            default: // There is no default
                break;
        }
        
        // return nothing
        return h.Mat.Emission;
    }
    
    // else, we hit nothing, return the skybox tex n zero energy, sky isn't reflective
    r.ColorWeight = 0.0f;


    // sample from the skybox
    float theta = acos(r.Dir.y) / -PI;
    float phi = atan2(r.Dir.x, -r.Dir.z) / -PI * 0.5f;
    float3 tex = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0.0f).xyz;

    // blend sky color and skybox texture sample
    return (_UsingSkybox * tex + (1.0f - _UsingSkybox) * _SkyColor) * 1.1f;
}

/// MAIN ===============================================================================================================
[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Set globals
    _Pixels = id.xy;
    
    // Get the dimensions of the RenderTexture
    uint w, h;
    Result.GetDimensions(w, h);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(w, h) * 2.0f - 1.0f);

    Ray ray = Ray_FromCamera(uv);

    // trace and shader
    float3 color = float3(0, 0, 0);
    for (uint i = 0; i < _MaxBounce + 1; ++i)
    {
        Hit hit = Trace(ray);
        color += ray.ColorWeight * Shade(ray, hit);
        if (!any(ray.ColorWeight))
            break;
    }
    Result[id.xy] = float4(color, 1.0f);
}
