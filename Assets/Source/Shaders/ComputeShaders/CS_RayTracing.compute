// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

/// INCLUDES
// Our neat and tidy include package
#include "Assets/Source/Shaders/UtilityShaders/UTIL_Generics.cginc"
#include "Assets/Source/Shaders/UtilityShaders/UTIL_Graphics.cginc"
#include "Assets/Source/Shaders/UtilityShaders/UTIL_Ray.cginc"

/// DEFINES
//#define IS_USING_SKYBOX 

/// EXTERNS
extern RWTexture2D<float4> Result;

extern Texture2D<float4> _SkyboxTexture;
extern SamplerState sampler_SkyboxTexture;

extern float2 _PixelOffset;
extern uint _MaxBounce;
extern float4 _DirectionalLight;
extern StructuredBuffer<Sphere> _Spheres;
extern uint _NumSpheres;

/// CONSTANTS
static const float3 GROUND_ALBEDO = UNI_FlOAT3(0.85f);
static const float3 GROUND_SPECULAR = UNI_FlOAT3(0.0f);
static const float3 SKY_COLOR = float3(0.0f, 0.0f, 0.0f);

/// GENERICS 
void IntersectGroundPlane(Ray r, inout Hit best) {
    // calc the distance along the ray where the ground plane is intersected
    float t = -r.Origin.y / r.Dir.y;
    if (t > 0.0f && t < best.Dist)
    {
        best = Hit_Construct(r, t);
        best.Mat = Material_Construct(GROUND_ALBEDO, GROUND_SPECULAR);
    }
}

/// RAY TRACING GUTS
Hit Trace(Ray r) {
    Hit best = Hit_Construct();
    IntersectGroundPlane(r, best);

    for (uint i = 0; i < _NumSpheres; ++i)
        IntersectSphere(r, best, _Spheres[i]);
    
    return best;
}

float3 Shade(inout Ray r, Hit h) {
    if (h.Dist < INF)   // We hit something
    {
        r.Origin = h.Pos + h.Norm * 0.001f;
        r.Dir = SampleHemisphere(h.Norm);
        r.ColorWeight *= 2 * h.Mat.Albedo * sdot(h.Norm, r.Dir);
        return UNI_FlOAT3(0.0f);

        // // Shadowing
        // bool shadow = false;
        // Ray shadow_ray = Ray_Construct(h.Pos + h.Norm * 0.001f, -1 * _DirectionalLight.xyz);
        // Hit shadow_hit = Trace(shadow_ray);
        // if (shadow_hit.Dist != INF)
        // {
        //     
        // }
        //
        // // real boi diffuse shading (lambert diffuse)
        //
        // return saturate(dot(h.Norm, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * h.Mat.Albedo;
    }
    
    // else, we hit nothing, return the skybox tex n zero energy, sky isn't reflective
    r.ColorWeight = 0.0f;
#ifdef IS_USING_SKYBOX
    float theta = acos(r.Dir.y) / -PI;
    float phi = atan2(r.Dir.x, -r.Dir.z) / -PI * 0.5f;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.1f;

#else
    return SKY_COLOR;
#endif
}

/// MAIN ===============================================================================================================
[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Set globals
    _Pixels = id.xy;
    
    // Get the dimensions of the RenderTexture
    uint w, h;
    Result.GetDimensions(w, h);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(w, h) * 2.0f - 1.0f);

    Ray ray = Ray_FromCamera(uv);

    // trace and shader
    float3 color = float3(0,0,0);
    for (uint i = 0; i < _MaxBounce + 1; ++i)
    {
        Hit hit = Trace(ray);
        color += ray.ColorWeight * Shade(ray, hit);
        if (!any(ray.ColorWeight))
            break;
    }
    Result[id.xy] = float4(color, 1.0f);
}
