// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define UNI_FlOAT3(value) float3(value, value, value)
#define IS_USING_SKYBOX 

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

float2 _PixelOffset;
float2 _Pixel;

uint _MaxBounce;

float4 _DirectionalLight;

float _Seed;

struct Sphere {
    float3 Pos;
    float Rad;
    float3 Albedo;
    float3 Specular;
};
StructuredBuffer<Sphere> _Spheres;
uint _NumSpheres;

/// Constants
static const float PI = 3.14158265f;
static const float INF = 1. / 0.;
static const float3 GROUND_ALBEDO = UNI_FlOAT3(0.85f);
static const float3 GROUND_SPECULAR = UNI_FlOAT3(0.0f);

float Rand() {
    return frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
}

float3x3 GetTangentSpace(float3 normal) {
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal) {
    // uniformly sample the hemisphere direction
    float cos_theta = Rand();
    float sin_theta = sqrt(max(0, 1.0f - cos_theta * cos_theta));
    float phi = 2 * PI * Rand();
    float3 tangent_space_dir = float3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);

    // transform the direction into world space
    return mul(tangent_space_dir, GetTangentSpace(normal));
}

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

struct Ray {
    float3 Origin;
    float3 Dir;
    float3 ColorWeight;
};

Ray Ray_Construct(float3 o, float3 d) {
    Ray ray;
    ray.Dir = d;
    ray.Origin = o;
    ray.ColorWeight = float3(1,1,1);
    return ray;
}

Ray Ray_FromCamera(float2 uv) {
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f,0.0f,0.0f,1.0f)).xyz;

    // invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from camera to world space and normalize;
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return Ray_Construct(origin, direction);
}

struct Hit {
    float3 Pos;
    float Dist;
    float3 Norm;
    float3 Albedo;
    float3 Specular;
};

Hit Hit_Construct() {
    Hit h;
    h.Pos = float3(0,0,0);
    h.Dist = INF;
    h.Norm = float3(0,1,0);
    h.Albedo = GROUND_ALBEDO;
    h.Specular = GROUND_SPECULAR;
    return h;
}

Hit Hit_Construct(Ray r, float d) {
    Hit h = Hit_Construct();
    h.Pos = r.Origin + d * r.Dir;
    h.Dist = d;
    h.Norm = float3(0,1,0);
    return h;
}

void IntersectGroundPlane(Ray r, inout Hit best) {
    // calc the distance along the ray where the ground plane is intersected
    float t = -r.Origin.y / r.Dir.y;
    if (t > 0 && t < best.Dist)
        best = Hit_Construct(r, t);
}

void IntersectSphere(Ray r, inout Hit best, Sphere s) {
    // calc the distance along the ray where the sphere is intersected
    float3 d = r.Origin - s.Pos;
    float p1 = -dot(r.Dir, d);
    float p2sqr = p1 * p1 - dot(d,d) + s.Rad * s.Rad;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < best.Dist)
    {
        best = Hit_Construct(r, t);
        best.Norm = normalize(best.Pos - s.Pos);
        best.Albedo = s.Albedo;
        best.Specular = s.Specular;
    }
}

Hit Trace(Ray r) {
    Hit best = Hit_Construct();
    IntersectGroundPlane(r, best);

    for (uint i = 0; i < _NumSpheres; ++i)
        IntersectSphere(r, best, _Spheres[i]);
    
    return best;
}

float3 Shade(inout Ray r, Hit h) {
    if (h.Dist < INF)   // We hit something
    {
        r.Origin = h.Pos + h.Norm * 0.001f;
        r.Dir = SampleHemisphere(h.Norm);
        r.ColorWeight *= 2 * h.Albedo * sdot(h.Norm, r.Dir);
        return UNI_FlOAT3(0.0f);

        // Shadowing
        bool shadow = false;
        Ray shadow_ray = Ray_Construct(h.Pos + h.Norm * 0.001f, -1 * _DirectionalLight.xyz);
        Hit shadow_hit = Trace(shadow_ray);
        if (shadow_hit.Dist != INF)
        {
            
        }
        
        // real boi diffuse shading (lambert diffuse)
        
        return saturate(dot(h.Norm, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * h.Albedo;
    }
    
    // else, we hit nothing, return the skybox tex n zero energy, sky isn't reflective
    r.ColorWeight = 0.0f;
#ifdef IS_USING_SKYBOX
    float theta = acos(r.Dir.y) / -PI;
    float phi = atan2(r.Dir.x, -r.Dir.z) / -PI * 0.5f;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.1f;
#else
    
    return UNI_FlOAT3(1.0f);
#endif

}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Set id.xy to a global
    _Pixel = id.xy;
    
    // Get the dimensions of the RenderTexture
    uint w, h;
    Result.GetDimensions(w, h);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(w, h) * 2.0f - 1.0f);

    Ray ray = Ray_FromCamera(uv);

    // trace and shader
    float3 color = float3(0,0,0);
    for (uint i = 0; i < _MaxBounce + 1; ++i)
    {
        Hit hit = Trace(ray);
        color += ray.ColorWeight * Shade(ray, hit);
        if (!any(ray.ColorWeight))
            break;
    }
    Result[id.xy] = float4(color, 1.0f);
}
